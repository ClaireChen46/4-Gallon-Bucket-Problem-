#*********************************************************************************#
# FILE: 4_gallon.sh                                                               #
#                                                                                 #
# USAGE: 4_gallon.sh                                                              #
#                                                                                 #
# DESCRIPTION: Solves the problem of fetching exactly 4 gallons                   #
#              using a 3 and 5-gallon bucket.                                     #
#                                                                                 #
# OPTIONS: List options for the script [-h]                                       #
#                                                                                 #
# DEVELOPER: Claire Chen                                                          #
# DEVELOPER PHONE: +1(504) 619-7541                                               #
# DEVELOPER EMAIL: JCH2349@emory.edu                                              #
#                                                                                 #
# VERSION: 1.0                                                                    #
# CREATED DATE-TIME: 20240523-10:00 Eastern Time Zone USA                         #
#                                                                                 #
# VERSION: 1.1                                                                    #
# REVISION DATE-TIME: YYYYMMDD-HH:MM                                              #
# DEVELOPER MAKING CHANGE: First_name Last_name                                   #
# DEVELOPER MAKING CHANGE: PHONE: +1 (XXX) XXX-XXXX                               #
# DEVELOPER MAKING CHANGE: EMAIL: first.last@email.com                            #
#                                                                                 #
#*********************************************************************************#

#    Scripts start below

from collections import deque

def solve_bucket_problem():
    initial_state = (0, 0)
    queue = deque([(initial_state, 0)])  # No need to store the parent state in the queue
    visited = set([initial_state])
    parent_map = {initial_state: (None, None)}  # The initial state has no parent

    while queue:
        state, steps = queue.popleft()

        # Check if the current state is the goal state
        if is_goal_state(state):
            # Trace back the path
            path = [] # path = [((3, 4), 6)]
            current = state # now current is (3, 4)
            while current is not None:
                path.append((current, steps))     # parent_map[(3, 4)] = ((2, 5), some_previous_steps)
                current, steps = parent_map[current]  # Correctly trace back to the parent state and steps
            path.reverse()

            # Print the path
            for s, step in path:
                print(f"Step {step}: State {s}")
            print(f"Goal reached: State {path[-1][0]} at step {path[-1][1]}")
            return path[-1][1]  # Return the number of steps found

        # Explore all possible neighboring states
        for neighbor in get_neighbors(state):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, steps + 1))
                parent_map[neighbor] = (state, steps)  # Record the state and steps to reach this neighbor

    return -1  # Return -1 if no goal state is found

def is_goal_state(state):
    # Check if the total amount of water in both buckets equals 4 gallons
    return (state[0] + state[1] == 4)

def get_neighbors(state):
    # Generate all possible next states from the current state
    x, y = state
    neighbors = []
    # Fill the 3-gallon bucket
    neighbors.append((3, y))
    # Fill the 5-gallon bucket
    neighbors.append((x, 5))
    # Empty the 3-gallon bucket
    neighbors.append((0, y))
    # Empty the 5-gallon bucket
    neighbors.append((x, 0))
    # Pour water from the 3-gallon bucket into the 5-gallon bucket
    transfer = min(x, 5 - y)
    neighbors.append((x - transfer, y + transfer))
    # Pour water from the 5-gallon bucket into the 3-gallon bucket
    transfer = min(y, 3 - x)
    neighbors.append((x + transfer, y - transfer))
    return neighbors

# Call the function and print the result
solve_bucket_problem()
