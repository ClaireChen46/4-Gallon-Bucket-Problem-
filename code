from collections import deque

def is_goal_state(state):
    return state[0] == 4 or state[1] == 4

def get_neighbors(state):
    x, y = state
    neighbors = []
    # Fill the 3-gallon bucket
    neighbors.append((3, y))
    # Fill the 5-gallon bucket
    neighbors.append((x, 5))
    # Empty the 3-gallon bucket
    neighbors.append((0, y))
    # Empty the 5-gallon bucket
    neighbors.append((x, 0))
    # Pour from 3-gallon to 5-gallon
    transfer = min(x, 5 - y)
    neighbors.append((x - transfer, y + transfer))
    # Pour from 5-gallon to 3-gallon
    transfer = min(y, 3 - x)
    neighbors.append((x + transfer, y - transfer))
    return neighbors

def solve_bucket_problem():
    initial_state = (0, 0)
    queue = deque([(initial_state, 0)])
    visited = set([initial_state])

    while queue:
        state, steps = queue.popleft()
        if is_goal_state(state):
            return steps
        for neighbor in get_neighbors(state):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, steps + 1))
    return -1

steps = solve_bucket_problem()
print(f'Solution found in {steps} steps')
